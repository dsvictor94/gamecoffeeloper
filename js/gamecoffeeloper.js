// Generated by CoffeeScript 1.4.0
(function() {
  var Context, Game, Loop, wrap;

  Game = (function() {

    function Game() {
      this.canvas = null;
      this.lastIteration = null;
      this.before_objs = new Array();
      this.after_objs = new Array();
    }

    Game.prototype.update_after = function() {
      var obj, _i, _len, _ref, _results;
      _ref = this.after_objs;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        obj = _ref[_i];
        _results.push(obj.update());
      }
      return _results;
    };

    Game.prototype.update_before = function() {
      var obj, _i, _len, _ref, _results;
      _ref = this.before_objs;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        obj = _ref[_i];
        _results.push(obj.update());
      }
      return _results;
    };

    Game.prototype.loop_register = function(obj, w) {
      if (w == null) {
        w = "before";
      }
      if (w === "before") {
        return this.before_objs.push(obj);
      } else if (w("after")) {
        return this.after_objs.push(obj);
      }
    };

    return Game;

  })();

  wrap = function(self, f) {
    return function() {
      return f.call(self);
    };
  };

  Loop = (function() {

    function Loop(context, canvas, fps) {
      this.context = context;
      this.canvas = canvas;
      this.fps = fps != null ? fps : 60;
      this.frame = this.canvas.getContext("2d");
      this.timer = "undefined";
      this.context.size = [this.canvas.width, this.canvas.height];
      this.context.game.canvas = this.canvas;
    }

    Loop.prototype.start = function() {
      var _base;
      if (typeof (_base = this.context).load === "function") {
        _base.load();
      }
      this.context.game.canvas = this.canvas;
      return this.timer = setInterval(wrap(this, this.loop), 1000 / this.fps);
    };

    Loop.prototype.stop = function() {
      var _base;
      if (typeof (_base = this.context).destroy === "function") {
        _base.destroy();
      }
      return clearInterval(this.timer);
    };

    Loop.prototype.loop = function() {
      var obj, _i, _j, _len, _len1, _ref, _ref1;
      this.context.game.update_before();
      _ref = this.context.getObjects();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        obj = _ref[_i];
        obj.update(this.context);
      }
      this.frame.clearRect(0, 0, this.canvas.width, this.canvas.height);
      _ref1 = this.context.getObjects();
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        obj = _ref1[_j];
        obj.paint(this.frame);
      }
      return this.context.game.update_after();
    };

    return Loop;

  })();

  Context = (function() {

    function Context() {
      this.objects = [];
      this.game = new Game();
    }

    Context.prototype.getObjects = function() {
      return this.objects;
    };

    Context.prototype.required = function(plugin) {
      return new plugin(this.game);
    };

    return Context;

  })();

  this.CLOPER = {
    Loop: Loop,
    Game: Game,
    Context: Context,
    VERSION: 0.7
  };

}).call(this);
