// Generated by CoffeeScript 1.4.0
(function() {
  var Context, Game, Loop, cancelAninFrame, lastTime, requestAninFrame, vendor, vendors, wrap, _i, _len;

  lastTime = 0;

  vendors = ['webkit', 'moz'];

  requestAninFrame = window.requestAnimationFrame;

  cancelAninFrame = window.cancelAnimationFrame;

  for (_i = 0, _len = vendors.length; _i < _len; _i++) {
    vendor = vendors[_i];
    if (requestAninFrame != null) {
      console.log(vendor);
      break;
    }
    requestAninFrame = window[vendor + "RequestAnimationFrame"];
    cancelAninFrame = window[vendor + "CancelAnimationFrame"];
  }

  if (!(requestAninFrame != null)) {
    requestAninFrame = function(callback, element) {
      var currTime, id, timeToCall;
      currTime = new Date().getTime();
      timeToCall = Math.max(0, 16 - (currTime - lastTime));
      lastTime = currTime + timeToCall;
      return id = window.setTimeout((function() {
        return callback(currTime + timeToCall);
      }), timeToCall);
    };
    cancelAninFrame = window.clearTimeout;
  }

  Game = (function() {

    function Game() {
      this.canvas = null;
      this.lastIteration = null;
      this.before_objs = new Array();
      this.after_objs = new Array();
    }

    Game.prototype.update_after = function() {
      var obj, _j, _len1, _ref, _results;
      _ref = this.after_objs;
      _results = [];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        obj = _ref[_j];
        _results.push(obj.update());
      }
      return _results;
    };

    Game.prototype.update_before = function() {
      var obj, _j, _len1, _ref, _results;
      _ref = this.before_objs;
      _results = [];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        obj = _ref[_j];
        _results.push(obj.update());
      }
      return _results;
    };

    Game.prototype.loop_register = function(obj, w) {
      if (w == null) {
        w = "before";
      }
      if (w === "before") {
        return this.before_objs.push(obj);
      } else if (w("after")) {
        return this.after_objs.push(obj);
      }
    };

    return Game;

  })();

  wrap = function(self, f) {
    return function() {
      return f.call(self);
    };
  };

  Loop = (function() {

    function Loop(context, canvas) {
      this.context = context;
      this.canvas = canvas;
      this.ready = false;
      this.frame = this.canvas.getContext("2d");
      this.timer = "undefined";
      this.context.size = [this.canvas.width, this.canvas.height];
      this.context.game.canvas = this.canvas;
      this._loopwrap = wrap(this, this.loop);
      this.lastTime = 0;
    }

    Loop.prototype.start = function() {
      var _base, _ref;
      this.lastTime = new Date();
            if ((_ref = typeof (_base = this.context).load === "function" ? _base.load(wrap(this, this.loadOk)) : void 0) != null) {
        _ref;

      } else {
        this.loadOk();
      };
      this.context.game.canvas = this.canvas;
      return this._loopwrap();
    };

    Loop.prototype.stop = function() {
      var _base;
      if (typeof (_base = this.context).destroy === "function") {
        _base.destroy();
      }
      return clearInterval(this.timer);
    };

    Loop.prototype.loadOk = function() {
      return this.ready = true;
    };

    Loop.prototype.loop = function(now) {
      var dt, obj, _j, _k, _len1, _len2, _ref, _ref1;
      now = now != null ? now : new Date();
      dt = (now - this.lastTime) / 1000;
      this.context.game.update_before(dt);
      if (this.ready) {
        _ref = this.context.getObjects();
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          obj = _ref[_j];
          obj.update(this.context, dt);
        }
        this.frame.clearRect(0, 0, this.canvas.width, this.canvas.height);
        _ref1 = this.context.getObjects();
        for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
          obj = _ref1[_k];
          this.frame.save();
          obj.paint(this.frame);
          this.frame.restore();
        }
      } else {
        this.frame.clearRect(0, 0, this.canvas.width, this.canvas.height);
        this.frame.save();
        this.context.paintLoad(this.frame, dt);
        this.frame.restore();
      }
      this.context.game.update_after(dt);
      this.lastTime = now;
      return this.timer = requestAnimationFrame(this._loopwrap);
    };

    return Loop;

  })();

  Context = (function() {

    function Context() {
      this.objects = [];
      this.game = new Game();
    }

    Context.prototype.getObjects = function() {
      return this.objects;
    };

    Context.prototype.required = function(plugin) {
      return new plugin(this.game);
    };

    Context.prototype.paintLoad = function(frame) {
      return frame.fillText("Game CoffeeLoper \n Loading...", this.game.canvas.width / 2, this.game.canvas.height * 0.5);
    };

    return Context;

  })();

  this.CLOPER = {
    Loop: Loop,
    Game: Game,
    Context: Context,
    VERSION: 0.7
  };

}).call(this);
